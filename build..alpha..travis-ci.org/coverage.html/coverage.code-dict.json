{"/home/travis/build/npmtest/node-npmtest-digitalocean/test.js":"/* istanbul instrument in package npmtest_digitalocean */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-digitalocean/lib.npmtest_digitalocean.js":"/* istanbul instrument in package npmtest_digitalocean */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_digitalocean = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_digitalocean = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-digitalocean/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-digitalocean && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_digitalocean */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_digitalocean\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_digitalocean.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_digitalocean.rollup.js'] =\n            local.assetsDict['/assets.npmtest_digitalocean.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_digitalocean.__dirname +\n                    '/lib.npmtest_digitalocean.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-digitalocean/node_modules/digitalocean/lib/digitalocean.js":"module.exports = {\n  client: require('./digitalocean/client'),\n  account: require('./digitalocean/account'),\n};\n\n//\n// Reused type documnentation\n//\n\n/**\n * Every resource method accepts an optional callback as the last argument.\n *\n * @callback requestCallback\n * @param {object} error - An error or null if no error occurred.\n * @param {object} resource - The resource or null if error.\n * @param {object} headers - An object containing the response headers.\n * @param {string} body - The raw response body.\n */","/home/travis/build/npmtest/node-npmtest-digitalocean/node_modules/digitalocean/lib/digitalocean/client.js":"(function() {\n  // External Dependencies\n  var url = require('url'),\n    request = require('request'),\n    Promise = require('bluebird'),\n    deepExtend = require('deep-extend');\n\n  // API sections\n  var Account = require('./account'),\n    Action = require('./action'),\n    Domain = require('./domain'),\n    Droplet = require('./droplet'),\n    Volume = require('./volume'),\n    FloatingIp = require('./floating_ip'),\n    Image = require('./image'),\n    Region = require('./region'),\n    Size = require('./size'),\n    Snapshot = require('./snapshot'),\n    Tag = require('./tag');\n\n  // Utilities\n  var slice = [].slice,\n    util = require('./util'),\n    DigitalOceanError = require('./error');\n\n  /**\n    * Client resource\n    * @class Client\n    */\n  var Client = (function() {\n    /**\n     * @typedef ClientOptions\n     * @type {object}\n     * @property {object} [request] - pass in a specific version of the request library.\n     * @property {object} [promise] - pass in a specific version of promise library.\n     * @property {object} [requestOptions] - a base set of options provided to Request, overridden by options passed to a specific API method. defaults to empty object.\n     * @property {boolean} [decamelizeKeys] - whether to automagically translate query and JSON body keys to use underscore separated names.\n     * @property {string} [protocol] - defaults to https.\n     * @property {string} [hostname] - defaults to api.digitalocean.com.\n     * @property {string} [port] - defaults to protocol default (e.g. with a protocol of https defaults to 443).\n     */\n\n    /**\n     * Create a new Client instance.\n     *\n     * @param {string} token - The DigitalOcean token used for authorization.\n     * @param {ClientOptions} [options] - An object whose values are used to configure a client instance.\n     * @memberof Client\n     */\n    function Client(token, options) {\n      this.token = token;\n      this.options = options;\n\n      this.requestOptions = this.options && this.options.requestOptions || {};\n      this.request = this.options && this.options.request || request;\n      this.promise = this.options && this.options.promise || Promise;\n      this.decamelizeKeys = this.options ? this.options.decamelizeKeys : true;\n\n      var version = require('../../package.json').version;\n      this.requestDefaults = {\n        headers: {\n          'User-Agent': 'digitalocean-node/' + version,\n          'Content-Type': 'application/json'\n        }\n      };\n\n      this.version = 'v2';\n      this.host = 'api.digitalocean.com';\n\n      this.account = new Account(this);\n      this.actions = new Action(this);\n      this.domains = new Domain(this);\n      this.volumes = new Volume(this);\n      this.floatingIps = new FloatingIp(this);\n      this.images = new Image(this);\n      this.droplets = new Droplet(this);\n      this.regions = new Region(this);\n      this.sizes = new Size(this);\n      this.snapshots = new Snapshot(this);\n      this.tags = new Tag(this);\n    }\n\n    /** @private */\n    Client.prototype._buildUrl = function(path, urlParams) {\n      if (path == null) {\n        path = '/';\n      }\n\n      if (urlParams == null) {\n        urlParams = {};\n      }\n\n      var urlFromPath = url.parse(this.version + path);\n\n      if (!!this.decamelizeKeys) {\n        urlParams = util.decamelizeKeys(urlParams);\n      }\n\n      return url.format({\n        protocol: urlFromPath.protocol || this.options && this.options.protocol || \"https:\",\n        auth: urlFromPath.auth || (this.token && this.token.username && this.token.password ? this.token.username + \":\" + this.token.password : ''),\n        hostname: urlFromPath.hostname || this.options && this.options.hostname || this.host,\n        port: urlFromPath.port || this.options && this.options.port,\n        pathname: urlFromPath.pathname,\n        query: urlParams\n      });\n    };\n\n    // Returns a function that curries the callback to handle the response from\n    // `request`. The returned function has an interface of: `function(err, res, body)`.\n    //\n    // successStatuses, required, number or array of numbers\n    // successRootKeys, required, string or array of strings\n    // callback, required, function\n    /** @private */\n    Client.prototype._buildrequestPromiseHandler = function(successStatuses, successRootKeys, resolve, reject) {\n      if (typeof successStatuses === 'number') {\n        successStatuses = [successStatuses];\n      }\n\n      if (typeof successRootKeys === 'string') {\n        successRootKeys = [successRootKeys];\n      }\n\n      return function(err, res, body) {\n        if (err) {\n          return reject(err);\n        }\n\n        // Handle errors on DO's side (5xx level)\n        var statusCodeLevel = Math.floor(res.statusCode / 100);\n        if (statusCodeLevel === 5) {\n          return reject(new DigitalOceanError('Error ' + res.statusCode, res.statusCode, res.headers));\n        }\n\n        // Handle improperly returned reponses (e.g. html or something else bizarre)\n        if (typeof body === 'string') {\n          try {\n            body = JSON.parse(body || '{}');\n          } catch (jsonParseError) {\n            return reject(jsonParseError);\n          }\n        }\n\n        // Handle validation errors (4xx level)\n        if (body.message && statusCodeLevel === 4) {\n          return reject(new DigitalOceanError(body.message, res.statusCode, res.headers, body));\n        }\n\n        // Handle an unexpcted response code\n        if (successStatuses.indexOf(res.statusCode) < 0) {\n          return reject(new Error('Unexpected reponse code: ' + res.statusCode));\n        }\n\n        // Find the first key from the body object in successRootKeys\n        var data = {};\n        for (var i = 0; i < successRootKeys.length; i++) {\n          var key = successRootKeys[i];\n          if (body[key]) {\n            data = body[key];\n            break;\n          }\n        }\n\n        // Append response data under a special key in the object\n        data._digitalOcean = {\n          statusCode: res.statusCode,\n          body: body,\n          headers: res.headers\n        };\n        return resolve(data);\n      };\n    };\n\n    /** @private */\n    Client.prototype._callbackOrPromise = function(options, overrideOptions, successStatuses, successRootKeys, callback) {\n      // Use a hierarchy of options to provide overrides:\n      //  1. this.requestDefaults (specified by client)\n      //  2. this.requestOptions  (specified by user at client initialization)\n      //  3. options              (specfied by client per call type)\n      //  4. overrideOptions      (specified by user at call time)\n      var requestOptions = deepExtend(this.requestDefaults, this.requestOptions, options, overrideOptions);\n\n      var self = this;\n      var deferred = new this.promise(function(resolve, reject) {\n        self.request(\n          requestOptions,\n          self._buildrequestPromiseHandler(successStatuses, successRootKeys, resolve, reject)\n        );\n      });\n\n      if (callback) {\n        // If a callback is provided, translate it to a Promise (to ensure\n        // it's called outside of the promise stack, call via timeout)\n        deferred\n          .then(function(response) {\n            setTimeout(function() {\n              callback(\n                null,\n                response,\n                response._digitalOcean.headers,\n                response._digitalOcean.body\n              );\n            }, 0);\n          })\n          .catch(function(error) {\n            setTimeout(function() {\n              callback(error);\n            }, 0);\n          });\n      }\n\n      return deferred;\n    };\n\n    /**\n     * Send a HTTP GET request with the specified parameters.\n     *\n     * @param {string} path - the URL escaped route\n     * @param {object} options - an object passed to the request library  See the {@link https://github.com/request/request#requestoptions-callback|request docs} for valid attributes, e.g. a proxy or user agent\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {number|number[]} successStatuses - number or array of numbers corresponding to successful HTTP status codes\n     * @param {string|string[]} successRootKeys - string or array of strings corresponding to the root objects containing successful responses\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Client\n     */\n    Client.prototype.get = function() {\n      var i;\n      var path = arguments[0],\n          options = arguments[1],\n          params = 4 <= arguments.length ? slice.call(arguments, 2, i = arguments.length - 3) : (i = 2, []),\n          successStatuses = arguments[i++],\n          successRootKeys = arguments[i++],\n          callback = arguments[i++];\n\n      var pageOrQuery = params[0],\n          perPage = params[1],\n          query = null;\n      if ((pageOrQuery != null) && typeof pageOrQuery === 'object') {\n        query = pageOrQuery;\n      } else {\n        query = {};\n        if (pageOrQuery != null) {\n          query.page = pageOrQuery;\n        }\n        if (perPage != null) {\n          query.per_page = perPage;\n        }\n      }\n\n      return this._callbackOrPromise(\n        {\n          uri: this._buildUrl(path, query),\n          method: 'GET',\n          headers: {\n            'Authorization': 'Bearer ' + this.token\n          }\n        },\n        options,\n        successStatuses,\n        successRootKeys,\n        callback\n      );\n    };\n\n    /** @private */\n    Client.prototype._makeRequestWithBody = function(type, path, content, options, successStatuses, successRootKeys, callback) {\n      // if `options` isn't passed, shift arguments back by one and set\n      // default hash for options\n      if (callback == null && (successRootKeys == null || typeof successRootKeys === 'function')) {\n        callback = successRootKeys;\n        successRootKeys = successStatuses;\n        successStatuses = options;\n        options = {};\n      }\n\n      if (!!this.decamelizeKeys) {\n        content = util.decamelizeKeys(content);\n      }\n\n      return this._callbackOrPromise(\n        {\n          uri: this._buildUrl(path, options.query),\n          method: type,\n          headers: {\n            'Authorization': 'Bearer ' + this.token\n          },\n          body: JSON.stringify(content)\n        },\n        options,\n        successStatuses,\n        successRootKeys,\n        callback\n      );\n    };\n\n\n    /**\n     * Send a HTTP POST request with the specified parameters.\n     *\n     * @param {string} path - the URL escaped route\n     * @param {object} content - an object serialized to json\n     * @param {object} options - an object passed to the request library  See the {@link https://github.com/request/request#requestoptions-callback|request docs} for valid attributes, e.g. a proxy or user agent\n     * @param {number|number[]} successStatuses - number or array of numbers corresponding to successful HTTP status codes\n     * @param {string|string[]} successRootKeys - string or array of strings corresponding to the root objects containing successful responses\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Client\n     */\n    Client.prototype.post = function(path, content, options, successStatuses, successRootKeys, callback) {\n      return this._makeRequestWithBody('POST', path, content, options, successStatuses, successRootKeys, callback);\n    };\n\n    /**\n     * Send a HTTP PATCH request with the specified parameters.\n     *\n     * @param {string} path - the URL escaped route\n     * @param {object} content - an object serialized to json\n     * @param {object} options - an object passed to the request library  See the {@link https://github.com/request/request#requestoptions-callback|request docs} for valid attributes, e.g. a proxy or user agent\n     * @param {number|number[]} successStatuses - number or array of numbers corresponding to successful HTTP status codes\n     * @param {string|string[]} successRootKeys - string or array of strings corresponding to the root objects containing successful responses\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Client\n     */\n    Client.prototype.patch = function(path, content, options, successStatuses, successRootKeys, callback) {\n      return this._makeRequestWithBody('PATCH', path, content, options, successStatuses, successRootKeys, callback);\n    };\n\n    /**\n     * Send a HTTP PUT request with the specified parameters.\n     *\n     * @param {string} path - the URL escaped route\n     * @param {object} content - an object serialized to json\n     * @param {object} options - an object passed to the request library  See the {@link https://github.com/request/request#requestoptions-callback|request docs} for valid attributes, e.g. a proxy or user agent\n     * @param {number|number[]} successStatuses - number or array of numbers corresponding to successful HTTP status codes\n     * @param {string|string[]} successRootKeys - string or array of strings corresponding to the root objects containing successful responses\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Client\n     */\n    Client.prototype.put = function(path, content, options, successStatuses, successRootKeys, callback) {\n      return this._makeRequestWithBody('PUT', path, content, options, successStatuses, successRootKeys, callback);\n    };\n\n    /**\n     * Send a HTTP DELETE request with the specified parameters.\n     *\n     * @param {string} path - the URL escaped route\n     * @param {object} content - an object serialized to json\n     * @param {object} options - an object passed to the request library  See the {@link https://github.com/request/request#requestoptions-callback|request docs} for valid attributes, e.g. a proxy or user agent\n     * @param {number|number[]} successStatuses - number or array of numbers corresponding to successful HTTP status codes\n     * @param {string|string[]} successRootKeys - string or array of strings corresponding to the root objects containing successful responses\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Client\n     */\n    Client.prototype.delete = function(path, content, options, successStatuses, successRootKeys, callback) {\n      return this._makeRequestWithBody('DELETE', path, content, options, successStatuses, successRootKeys, callback);\n    };\n\n    return Client;\n  })();\n\n  module.exports = function(token, options) {\n    return new Client(token, options);\n  };\n}).call(this);","/home/travis/build/npmtest/node-npmtest-digitalocean/node_modules/digitalocean/lib/digitalocean/account.js":"(function() {\n  var slice = [].slice,\n    util = require('./util');\n\n  /**\n    * Account resource\n    * @class Account\n    */\n  var Account = (function() {\n    function Account(client) {\n      this.client = client;\n    }\n\n    /**\n     * Get the account object.\n     *\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Account\n     */\n    Account.prototype.get = function(callback) {\n      return this.client.get('/account', {}, 200, 'account', callback);\n    };\n\n    /**\n     * List ssh key objects.\n     *\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Account\n     */\n    Account.prototype.listSshKeys = function() {\n      var args = util.extractListArguments(arguments, 0);\n      return this.client.get.apply(this.client, ['/account/keys', {}].concat(slice.call(args.params), [200, 'ssh_keys', args.callback]));\n    };\n\n    /**\n     * Create a ssh key object.\n     *\n     * @param {object} attributes - The attributes with wich to create the ssh key. See the {@link https://developers.digitalocean.com/documentation/v2/#ssh-keys|official docs} for valid attributes.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Account\n     */\n    Account.prototype.createSshKey = function(attributes, callback) {\n      return this.client.post('/account/keys', attributes, 201, 'ssh_key', callback);\n    };\n\n    /**\n     * Get the identified ssh key object.\n     *\n     * @param {number} id - The id of the ssh key to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Account\n     */\n    Account.prototype.getSshKey = function(id, callback) {\n      var url = util.safeUrl('account', 'keys', id);\n      return this.client.get(url, {}, 200, 'ssh_key', callback);\n    };\n\n    /**\n     * Update the identified ssh key object.\n     *\n     * @param {number} id - The id of the ssh key to update\n     * @param {object} attributes - The attributes with which to update the ssh key. See the {@link https://developers.digitalocean.com/documentation/v2/#ssh-keys|official docs} for valid attributes.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Account\n     */\n    Account.prototype.updateSshKey = function(id, attributes, callback) {\n      var url = util.safeUrl('account', 'keys', id);\n      return this.client.put(url, attributes, 200, 'ssh_key', callback);\n    };\n\n    /**\n     * Delete the identified ssh key object.\n     *\n     * @param {number} id - The id of the ssh key to delete\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Account\n     */\n    Account.prototype.deleteSshKey = function(id, callback) {\n      var url = util.safeUrl('account', 'keys', id);\n      return this.client.delete(url, {}, 204, [], callback);\n    };\n\n    return Account;\n  })();\n\n  module.exports = Account;\n}).call(this);","/home/travis/build/npmtest/node-npmtest-digitalocean/node_modules/digitalocean/lib/digitalocean/util.js":"(function() {\n  var slice = [].slice;\n\n  module.exports.safeUrl = function() {\n    var args = Array.prototype.slice.call(arguments);\n    return args.reduce(function(accum, fragment) {\n      return accum + '/' + encodeURIComponent(fragment);\n    }, '');\n  };\n\n  // Based on Humps by Dom Christie\n  var decamelizeKeys = function(object) {\n    // if we're not an array or object, return the primative\n    if (object !== Object(object)) {\n      return object;\n    }\n\n    var decamelizeString = function(string) {\n      var separator = '_';\n      var split = /(?=[A-Z])/;\n\n      return string.split(split).join(separator).toLowerCase();\n    };\n\n\n    var output;\n    if (object instanceof Array) {\n      output = [];\n      for(var i = 0, l = object.length; i < l; i++) {\n        output.push(decamelizeKeys(object[i]));\n      }\n    } else {\n      output = {};\n      for (var key in object) {\n        if (object.hasOwnProperty(key)) {\n          output[decamelizeString(key)] = decamelizeKeys(object[key]);\n        }\n      }\n    }\n\n    return output;\n  };\n  module.exports.decamelizeKeys = decamelizeKeys;\n\n  module.exports.extractListArguments = function(args, countPrependedArgs) {\n    var startIndex, endIndex, id, params, callback;\n\n    var hasCallback = typeof(args[args.length - 1]) === 'function';\n\n    startIndex = countPrependedArgs;\n    if (args.length > 0) {\n      endIndex = args.length;\n      if (hasCallback) {\n        endIndex -= 1;\n      }\n      params = slice.call(args, startIndex, endIndex);\n    } else {\n      endIndex = countPrependedArgs;\n      params = [];\n    }\n\n    if (countPrependedArgs > 0) {\n      id = args[0];\n    }\n\n    if (hasCallback) {\n      callback = args[args.length - 1];\n    }\n\n    return {\n      identifier: id,\n      callback: callback,\n      params: params\n    };\n  };\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-digitalocean/node_modules/digitalocean/lib/digitalocean/action.js":"(function() {\n  var slice = [].slice,\n    util = require('./util');\n\n  /**\n    * Action resource\n    * @class Action\n    */\n  var Action = (function() {\n    function Action(client) {\n      this.client = client;\n    }\n\n    /**\n     * List action objects.\n     *\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Action\n     */\n    Action.prototype.list = function() {\n      var args = util.extractListArguments(arguments, 0);\n      return this.client.get.apply(this.client, ['/actions', {}].concat(slice.call(args.params), [200, 'actions', args.callback]));\n    };\n\n    /**\n     * Get the identified action object.\n     *\n     * @param {number} id - The id of the action to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Action\n     */\n    Action.prototype.get = function(id, callback) {\n      var url = util.safeUrl('action', id);\n      return this.client.get(url, {}, 200, 'action', callback);\n    };\n\n    return Action;\n  })();\n\n  module.exports = Action;\n}).call(this);","/home/travis/build/npmtest/node-npmtest-digitalocean/node_modules/digitalocean/lib/digitalocean/domain.js":"(function() {\n  var slice = [].slice,\n    util = require('./util');\n\n  /**\n    * Domain resource\n    * @class Domain\n    */\n  var Domain = (function() {\n    function Domain(client) {\n      this.client = client;\n    }\n\n    /**\n     * List domain objects.\n     *\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Domain\n     */\n    Domain.prototype.list = function() {\n      var args = util.extractListArguments(arguments, 0);\n      return this.client.get.apply(this.client, ['/domains', {}].concat(slice.call(args.params), [200, 'domains', args.callback]));\n    };\n\n    /**\n     * Create a domain object.\n     *\n     * @param {object} attributes - The attributes with which to create the domain. See the {@link https://developers.digitalocean.com/documentation/v2/#domains|official docs} for valid attributes.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Domain\n     */\n    Domain.prototype.create = function(attributes, callback) {\n      return this.client.post('/domains', attributes, 201, 'domain', callback);\n    };\n\n    /**\n     * Get the identified domain object.\n     *\n     * @param {string} name - The name of the domain to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Domain\n     */\n    Domain.prototype.get = function(name, callback) {\n      var url = util.safeUrl('domains', name);\n      return this.client.get(url, {}, 200, 'domain', callback);\n    };\n\n    /**\n     * Delete the identified domain object.\n     *\n     * @param {string} name - The name of the domain to delete\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Domain\n     */\n    Domain.prototype.delete = function(name, callback) {\n      var url = util.safeUrl('domains', name);\n      return this.client.delete(url, {}, 204, [], callback);\n    };\n\n    /**\n     * List domain record objects.\n     *\n     * @param {string} domainName - name of domain for which to retrieve records\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Domain\n     */\n    Domain.prototype.listRecords = function() {\n      var args = util.extractListArguments(arguments, 1);\n      var url = util.safeUrl('domains', args.identifier, 'records');\n\n      return this.client.get.apply(this.client, [url, {}].concat(slice.call(args.params), [200, 'domain_records', args.callback]));\n    };\n\n    /**\n     * Get the identified domain record object.\n     *\n     * @param {string} domainName - The name of the domain for which to retrieve a record\n     * @param {number} id - The id of the domain record to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Domain\n     */\n    Domain.prototype.getRecord = function(domainName, id, callback) {\n      var url = util.safeUrl('domains', domainName, 'records', id);\n      return this.client.get(url, {}, 200, 'domain_record', callback);\n    };\n\n    /**\n     * Create a record object in a domain.\n     *\n     * @param {string} domainName - The name of the domain for which to create a record\n     * @param {object} attributes - The attributes with which to create the domain record. See the {@link https://developers.digitalocean.com/documentation/v2/#domain-records|official docs} for valid attributes.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Domain\n     */\n    Domain.prototype.createRecord = function(domainName, attributes, callback) {\n      var url = util.safeUrl('domains', domainName, 'records');\n      return this.client.post(url, attributes, 201, 'domain_record', callback);\n    };\n\n    /**\n     * Update the identified record object in a domain.\n     *\n     * @param {string} domainName - The name of the domain for which to update the record\n     * @param {number} id - The id of the domain record to retrieve\n     * @param {object} attributes - The attributes with which to update the domain record. See the {@link https://developers.digitalocean.com/documentation/v2/#domain-records|official docs} for valid attributes.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Domain\n     */\n    Domain.prototype.updateRecord = function(domainName, id, attributes, callback) {\n      var url = util.safeUrl('domains', domainName, 'records', id);\n      return this.client.put(url, attributes, 200, 'domain_record', callback);\n    };\n\n    /**\n     * Delete the identified domain record object.\n     *\n     * @param {string} domainName - The name of the domain for which to delete a record\n     * @param {number} id - The id of the domain record to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Domain\n     */\n    Domain.prototype.deleteRecord = function(domainName, id, callback) {\n      var url = util.safeUrl('domains', domainName, 'records', id);\n      return this.client.delete(url, {}, 204, [], callback);\n    };\n\n    return Domain;\n  })();\n\n  module.exports = Domain;\n}).call(this);","/home/travis/build/npmtest/node-npmtest-digitalocean/node_modules/digitalocean/lib/digitalocean/droplet.js":"(function() {\n  var slice = [].slice,\n    util = require('./util');\n\n  /**\n    * Droplet resource\n    * @class Droplet\n    */\n  var Droplet = (function() {\n    function Droplet(client) {\n      this.client = client;\n    }\n\n    /**\n     * List Droplet objects.\n     *\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.list = function() {\n      var args = util.extractListArguments(arguments, 0);\n\n      return this.client.get.apply(this.client, ['/droplets', {}].concat(slice.call(args.params), [200, 'droplets', args.callback]));\n    };\n\n    /**\n     * Create a Droplet object.\n     *\n     * @param {object} attributes - The attributes with which to create the Droplet. See the {@link https://developers.digitalocean.com/documentation/v2/#droplets|official docs} for valid attributes.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.create = function(attributes, callback) {\n      return this.client.post('/droplets', attributes, 202, ['droplet', 'droplets'], callback);\n    };\n\n    /**\n     * Get the identified Droplet object.\n     *\n     * @param {number} id - The id of the Droplet to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.get = function(id, callback) {\n      var url = util.safeUrl('droplets', id);\n      return this.client.get(url, {}, 200, 'droplet', callback);\n    };\n\n    /**\n     * List kernel objects.\n     *\n     * @param {number} id - ID of Droplet for which to retrieve kernels\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.kernels = function() {\n      var args = util.extractListArguments(arguments, 1);\n      var url = util.safeUrl('droplets', args.identifier, 'kernels');\n\n      return this.client.get.apply(this.client, [url, {}].concat(slice.call(args.params), [200, 'kernels', args.callback]));\n    };\n\n    /**\n     * List of image objects that are snapshots of the Droplet.\n     *\n     * @param {number} id - ID of Droplet for which to retrieve snapshots\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.snapshots = function() {\n      var args = util.extractListArguments(arguments, 1);\n      var url = util.safeUrl('droplets', args.identifier, 'snapshots');\n\n      return this.client.get.apply(this.client, [url, {}].concat(slice.call(args.params), [200, 'snapshots', args.callback]));\n    };\n\n    /**\n     * List backup objects that are backups of the Droplet.\n     *\n     * @param {number} id - ID of Droplet for which to retrieve backups\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.backups = function() {\n      var args = util.extractListArguments(arguments, 1);\n      var url = util.safeUrl('droplets', args.identifier, 'backups');\n\n      return this.client.get.apply(this.client, [url, {}].concat(slice.call(args.params), [200, 'backups', args.callback]));\n    };\n\n    /**\n     * List of Droplet objects that are physically co-located with the Droplet.\n     *\n     * @param {number} id - ID of Droplet for which to retrieve neighbors\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.neighbors = function() {\n      var args = util.extractListArguments(arguments, 1);\n      var url = util.safeUrl('droplets', args.identifier, 'neighbors');\n\n      return this.client.get.apply(this.client, [url, {}].concat(slice.call(args.params), [200, 'droplets', args.callback]));\n    };\n\n    /**\n     * Delete the identified Droplet object.\n     *\n     * @param {number} id - The id of the Droplet to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.delete = function(id, callback) {\n      var url = util.safeUrl('droplets', id);\n      return this.client.delete(url, {}, 204, [], callback);\n    };\n\n    /**\n     * Delete the Droplets associated with the tag identified by the name.\n     *\n     * @param {string} name - The name of the tag for which to delete Droplets.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.deleteByTag = function(name, callback) {\n      var url = util.safeUrl('droplets');\n      var params = { tag_name: encodeURIComponent(name) };\n      return this.client.delete(url, params, 204, [], callback);\n    };\n\n    /**\n     * List of action objects.\n     *\n     * @param {number} id - ID of Droplet for which to retrieve actions\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.listActions = function() {\n      var args = util.extractListArguments(arguments, 1);\n      var url = util.safeUrl('droplets', args.identifier, 'actions');\n\n      return this.client.get.apply(this.client, [url, {}].concat(slice.call(args.params), [200, 'actions', args.callback]));\n    };\n\n    /**\n     * Get the identified action object.\n     *\n     * @param {number} dropletId - The id of the droplet for which to retrieve the action\n     * @param {number} id - The id of the action to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.getAction = function(dropletId, id, callback) {\n      var url = util.safeUrl('droplets', dropletId, 'actions', id);\n      return this.client.get(url, {}, 200, 'action', callback);\n    };\n\n    /**\n     * Create an action on the identified Droplet.\n     *\n     * @param {number} dropletId - The id of the droplet for which to create the action\n     * @param {string|object} parametersOrType - The name of the action to create or an object with key value pairs of parameters.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.action = function(dropletId, parametersOrType, callback) {\n      var parameters;\n\n      if(typeof parametersOrType === 'string') {\n        parameters = { type: parametersOrType };\n      } else {\n        parameters = parametersOrType;\n      }\n\n      var url = util.safeUrl('droplets', dropletId, 'actions');\n      return this.client.post(url, parameters, 201, 'action', callback);\n    };\n\n    /**\n     * Delete the Droplets associated with the tag identified by the name.\n     *\n     * @param {string} name - The name of the tag for which to delete Droplets.\n     * @param {string} actionType - The type of action to perform. See the {@link https://developers.digitalocean.com/documentation/v2/#acting-on-tagged-droplets|official docs} for accepted actions.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.actionByTag = function(tagName, actionType, callback) {\n      var parameters = {\n        tag_name: tagName,\n        type: actionType\n      };\n\n      return this.client.post('/droplets/actions', parameters, 201, 'actions', callback);\n    };\n\n    /**\n     * Shutdown the identified Droplet.\n     *\n     * @param {number} dropletId - The id of the droplet for which to create the action\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.shutdown = function(dropletId, callback) {\n      return this.action(dropletId, 'shutdown', callback);\n    };\n\n    /**\n     * Power off the identified Droplet.\n     *\n     * @param {number} dropletId - The id of the droplet for which to create the action\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.powerOff = function(dropletId, callback) {\n      return this.action(dropletId, 'power_off', callback);\n    };\n\n    /**\n     * Power on the identified Droplet.\n     *\n     * @param {number} dropletId - The id of the droplet for which to create the action\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.powerOn = function(dropletId, callback) {\n      return this.action(dropletId, 'power_on', callback);\n    };\n\n    /**\n     * Power cycle the identified Droplet.\n     *\n     * @param {number} dropletId - The id of the droplet for which to create the action\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.powerCycle = function(dropletId, callback) {\n      return this.action(dropletId, 'power_cycle', callback);\n    };\n\n    /**\n     * Reboot the identified Droplet.\n     *\n     * @param {number} dropletId - The id of the droplet for which to create the action\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.reboot = function(dropletId, callback) {\n      return this.action(dropletId, 'reboot', callback);\n    };\n\n    /**\n     * Enable backups on the identified Droplet.\n     *\n     * @param {number} dropletId - The id of the droplet for which to create the action\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.enableBackups = function(dropletId, callback) {\n      return this.action(dropletId, 'enable_backups', callback);\n    };\n\n    /**\n     * Disable backups on the identified Droplet.\n     *\n     * @param {number} dropletId - The id of the droplet for which to create the action\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.disableBackups = function(dropletId, callback) {\n      return this.action(dropletId, 'disable_backups', callback);\n    };\n\n    /**\n     * Reset the root user's password on the identified Droplet.\n     *\n     * @param {number} dropletId - The id of the droplet for which to create the action\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.passwordReset = function(dropletId, callback) {\n      return this.action(dropletId, 'password_reset', callback);\n    };\n\n    /**\n     * Enable IPv6 networking on the identified Droplet.\n     *\n     * @param {number} dropletId - The id of the droplet for which to create the action\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.enableIPv6 = function(dropletId, callback) {\n      return this.action(dropletId, 'enable_ipv6', callback);\n    };\n\n    /**\n     * Enable private-to-the-datacenter networking on the identified Droplet.\n     *\n     * @param {number} dropletId - The id of the droplet for which to create the action\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.enablePrivateNetworking = function(dropletId, callback) {\n      return this.action(dropletId, 'enable_private_networking', callback);\n    };\n\n    /**\n     * Change the available resources for the identified Droplet.\n     *\n     * @param {number} dropletId - The id of the droplet for which to create the action\n     * @param {string|object} parametersOrSizeSlug - If a string, the name of the size to change the Droplet to. Otherwise, an object with required keys of `size`. See the {@link https://developers.digitalocean.com/documentation/v2/#resize-a-droplet|official docs} for valid attributes.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.resize = function(dropletId, parametersOrSizeSlug, callback) {\n      var parameters;\n\n      if(typeof parametersOrSizeSlug !== 'object') {\n        parameters = {\n          size: parametersOrSizeSlug\n        };\n      } else {\n        parameters = parametersOrSizeSlug;\n      }\n      parameters.type = 'resize';\n\n      return this.action(dropletId, parameters, callback);\n    };\n\n    /**\n     * Change the hostname of the identified Droplet.\n     *\n     * @param {number} dropletId - The id of the droplet for which to create the action\n     * @param {string|object} parametersOrHostname - If a string, the hostname to change the Droplet to. Otherwise, an object with required keys of `name`. See the {@link https://developers.digitalocean.com/documentation/v2/#rename-a-droplet|official docs} for valid attributes.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.rename = function(dropletId, parametersOrHostname, callback) {\n      var parameters;\n\n      if(typeof parametersOrHostname !== 'object') {\n        parameters = {\n          name: parametersOrHostname\n        };\n      } else {\n        parameters = parametersOrHostname;\n      }\n      parameters.type = 'rename';\n\n      return this.action(dropletId, parameters, callback);\n    };\n\n    /**\n     * Create a snapshot image of the identified Droplet.\n     *\n     * @param {number} dropletId - The id of the droplet for which to create the action\n     * @param {string|object} parametersOrName - If a string, the name of the created image. Otherwise, an object with required keys of `name`. See the {@link https://developers.digitalocean.com/documentation/v2/#snapshot-a-droplet|official docs} for valid attributes.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.snapshot = function(dropletId, parametersOrName, callback) {\n      var parameters;\n\n      if(typeof parametersOrName !== 'object') {\n        parameters = {\n          name: parametersOrName\n        };\n      } else {\n        parameters = parametersOrName;\n      }\n      parameters.type = 'snapshot';\n\n      return this.action(dropletId, parameters, callback);\n    };\n\n    /**\n     * Recreate the Droplet from the identified image snapshot or backup.\n     *\n     * @param {number} dropletId - The id of the droplet for which to create the action\n     * @param {number|object} parametersOrImageId - If a number, identifier of the image to use. Otherwise, an object with required keys of `image`. See the {@link https://developers.digitalocean.com/documentation/v2/#restore-a-droplet|official docs} for valid attributes.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.restore = function(dropletId, parametersOrImageId, callback) {\n      var parameters;\n\n      if(typeof parametersOrImageId !== 'object') {\n        parameters = {\n          image: parametersOrImageId\n        };\n      } else {\n        parameters = parametersOrImageId;\n      }\n      parameters.type = 'restore';\n\n      return this.action(dropletId, parameters, callback);\n    };\n\n    /**\n     * Recreate the Droplet from the identified distribution image.\n     *\n     * @param {number} dropletId - The id of the droplet for which to create the action\n     * @param {string|number|object} parametersOrImage - If a string, the slug of the distribution image to use. If a number, the identifier of the distribution image to use. Otherwise, an object with required keys of `image`. See the {@link https://developers.digitalocean.com/documentation/v2/#rebuild-a-droplet|official docs} for valid attributes.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.rebuild = function(dropletId, parametersOrImage, callback) {\n      var parameters;\n\n      if(typeof parametersOrImage !== 'object') {\n        parameters = {\n          image: parametersOrImage\n        };\n      } else {\n        parameters = parametersOrImage;\n      }\n      parameters.type = 'rebuild';\n\n      return this.action(dropletId, parameters, callback);\n    };\n\n    /**\n     * Recreate the Droplet from the identified distribution image.\n     *\n     * @param {number} dropletId - The id of the droplet for which to create the action\n     * @param {number|object} parametersOrKernelId - If a number, the identifier of the kernel to use. Otherwise, an object with required keys of `kernel`. See the {@link https://developers.digitalocean.com/documentation/v2/#change-the-kernel|official docs} for valid attributes.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Droplet.prototype.changeKernel = function(dropletId, parametersOrKernelId, callback) {\n      var parameters;\n\n      if(typeof parametersOrKernelId !== 'object') {\n        parameters = {\n          kernel: parametersOrKernelId\n        };\n      } else {\n        parameters = parametersOrKernelId;\n      }\n      parameters.type = 'change_kernel';\n\n      return this.action(dropletId, parameters, callback);\n    };\n\n    return Droplet;\n  })();\n\n  module.exports = Droplet;\n}).call(this);","/home/travis/build/npmtest/node-npmtest-digitalocean/node_modules/digitalocean/lib/digitalocean/volume.js":"(function() {\n  var slice = [].slice,\n    util = require('./util');\n\n  /**\n    * Volume resource\n    * @class Volume\n    */\n  var Volume = (function() {\n    function Volume(client) {\n      this.client = client;\n    }\n\n    /**\n     * List volume objects.\n     *\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Volume\n     */\n    Volume.prototype.list = function() {\n      var args = util.extractListArguments(arguments, 0);\n\n      return this.client.get.apply(this.client, ['/volumes', {}].concat(slice.call(args.params), [200, 'volumes', args.callback]));\n    };\n\n    /**\n     * Create a volume object.\n     *\n     * @param {object} attributes - The attributes with which to create the Volume. See the {@link https://developers.digitalocean.com/documentation/v2/#volumes|official docs} for valid attributes.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Volume\n     */\n    Volume.prototype.create = function(attributes, callback) {\n      return this.client.post('/volumes', attributes, 201, 'volume', callback);\n    };\n\n    /**\n     * Get the identified volume object.\n     *\n     * @param {string} id - The id of the volume to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Volume\n     */\n    Volume.prototype.get = function(id, callback) {\n      var url = util.safeUrl('volumes', id);\n      return this.client.get(url, {}, 200, 'volume', callback);\n    };\n\n    /**\n     * List of snapshot objects from this volume.\n     *\n     * @param {number} id - ID of Droplet for which to retrieve snapshots\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Droplet\n     */\n    Volume.prototype.snapshots = function() {\n      var args = util.extractListArguments(arguments, 1);\n      var url = util.safeUrl('volumes', args.identifier, 'snapshots');\n\n      return this.client.get.apply(this.client, [url, {}].concat(slice.call(args.params), [200, 'snapshots', args.callback]));\n    };\n\n    /**\n     * Create a snapshot from the volume.\n     *\n     * @param {string} id - The id of the volume to snapshot\n     * @param {string} name - The name with which to create the snapshot. See the {@link https://developers.digitalocean.com/documentation/v2/#images|official docs} for valid attributes.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Image\n     */\n    Volume.prototype.snapshot = function(id, parametersOrName, callback) {\n      var parameters;\n\n      if(typeof parametersOrName !== 'object') {\n        parameters = {\n          name: parametersOrName\n        };\n      } else {\n        parameters = parametersOrName;\n      }\n\n      var url = util.safeUrl('volumes', id, 'snapshots');\n      return this.client.post(url, parameters, 201, 'snapshot', callback);\n    };\n\n    /**\n     * Delete the identified volume object.\n     *\n     * @param {string} id - The id of the volume to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Volume\n     */\n    Volume.prototype.delete = function(id, callback) {\n      var url = util.safeUrl('volumes', id);\n      return this.client.delete(url, {}, 204, [], callback);\n    };\n\n    /**\n     * List of action objects.\n     *\n     * @param {string} id - ID of volume for which to retrieve actions\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Volume\n     */\n    Volume.prototype.listActions = function() {\n      var args = util.extractListArguments(arguments, 1);\n      var url = util.safeUrl('volumes', args.identifier, 'actions');\n      return this.client.get.apply(this.client, [url, {}].concat(slice.call(args.params), [200, 'actions', args.callback]));\n    };\n\n    /**\n     * Get the identified action object.\n     *\n     * @param {string} volumeId - The id of the volume for which to retrieve the action\n     * @param {number} id - The id of the action to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Volume\n     */\n    Volume.prototype.getAction = function(volumeId, id, callback) {\n      var url = util.safeUrl('volumes', volumeId, 'actions', id);\n      return this.client.get(url, {}, 200, 'action', callback);\n    };\n\n    /**\n     * Create an action on the identified volume.\n     *\n     * @param {string} volumeId - The id of the volume for which to create the action\n     * @param {string|object} parametersOrType - The name of the action to create or an object with key value pairs of parameters.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Volume\n     */\n    Volume.prototype.action = function(volumeId, parametersOrType, callback) {\n      var parameters;\n\n      if(typeof parametersOrType === 'string') {\n        parameters = { type: parametersOrType };\n      } else {\n        parameters = parametersOrType;\n      }\n\n      var url = util.safeUrl('volumes', volumeId, 'actions');\n      return this.client.post(url, parameters, 202, 'action', callback);\n    };\n\n    /**\n     * Detach the identified volume if it is attached to a Droplet.\n     *\n     * @param {string} volumeId - The id of the volume for which to create the action\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Volume\n     */\n    Volume.prototype.detach = function(volumeId, callback) {\n      return this.action(volumeId, 'detach', callback);\n    };\n\n    /**\n     * Attach the identified volume to a given Droplet.\n     *\n     * @param {string} volumeId - The id of the volume for which to create the action\n     * @param {number|object} parametersOrDropletId - If a number, the id of the droplet to which to attach the volume. Otherwise, an object with required keys of `droplet_id`. See the {@link https://developers.digitalocean.com/documentation/v2/#attach-a-block-storage-volume-to-a-droplet|official docs} for valid attributes.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Volume\n     */\n    Volume.prototype.attach = function(volumeId, parametersOrDropletId, callback) {\n      var parameters;\n\n      if(typeof parametersOrDropletId !== 'object') {\n        parameters = {\n          droplet_id: parametersOrDropletId\n        };\n      } else {\n        parameters = parametersOrDropletId;\n      }\n      parameters.type = 'attach';\n\n      return this.action(volumeId, parameters, callback);\n    };\n\n    /**\n     * Increase the size of the identified volume.\n     *\n     * @param {string} volumeId - The id of the volume for which to create the action\n     * @param {number|object} parametersOrSizeGibabytes - If a number, the size in gigabytes to which the volume should be resized. Otherwise, an object with required keys of `size_gigabytes` and `region`. See the {@link https://developers.digitalocean.com/documentation/v2/#resize-a-volume|official docs} for valid attributes.\n     * @param {string} region - The slug of the region in which the drive was created\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Volume\n     */\n    Volume.prototype.resize = function(volumeId, parametersOrSizeGibabytes, region, callback) {\n      var parameters;\n\n      if(typeof parametersOrSizeGibabytes !== 'object') {\n        parameters = {\n          size_gigabytes: parametersOrSizeGibabytes,\n          region: region\n        };\n      } else {\n        parameters = parametersOrSizeGibabytes;\n        callback = region;\n      }\n      parameters.type = 'resize';\n\n      return this.action(volumeId, parameters, callback);\n    };\n\n    return Volume;\n  })();\n\n  module.exports = Volume;\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-digitalocean/node_modules/digitalocean/lib/digitalocean/floating_ip.js":"(function() {\n  var slice = [].slice,\n    util = require('./util');\n\n  /**\n    * Floating IP resource\n    * @class FloatingIp\n    */\n  var FloatingIp = (function() {\n    function FloatingIp(client) {\n      this.client = client;\n    }\n\n    /**\n     * List Floating IP objects.\n     *\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof FloatingIp\n     */\n    FloatingIp.prototype.list = function() {\n      var args = util.extractListArguments(arguments, 0);\n\n      return this.client.get.apply(this.client, ['/floating_ips', {}].concat(slice.call(args.params), [200, 'floating_ips', args.callback]));\n    };\n\n    /**\n     * Create a floating IP object.\n     *\n     * @param {object} attributes - The attributes with which to create the floating ip. See the {@link https://developers.digitalocean.com/documentation/v2/#floating-ips|official docs} for valid attributes.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof FloatingIp\n     */\n    FloatingIp.prototype.create = function(attributes, callback) {\n      return this.client.post('/floating_ips', attributes, 202, 'floating_ip', callback);\n    };\n\n    /**\n     * Get the identified floating ip object.\n     *\n     * @param {string} ip - The IP of the floating ip to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof FloatingIp\n     */\n    FloatingIp.prototype.get = function(ip, callback) {\n      var url = util.safeUrl('floating_ips', ip);\n      return this.client.get(url, {}, 200, 'floating_ip', callback);\n    };\n\n    /**\n     * Delete the identified floating ip object.\n     *\n     * @param {string} ip - The ip of the floating ip to delete\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof FloatingIp\n     */\n    FloatingIp.prototype.delete = function(ip, callback) {\n      var url = util.safeUrl('floating_ips', ip);\n      return this.client.delete(url, {}, 204, [], callback);\n    };\n\n    /**\n     * List of action objects.\n     *\n     * @param {string} ip - The IP of the floating ip for which to retrieve actions\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof FloatingIp\n     */\n    FloatingIp.prototype.listActions = function() {\n      var args = util.extractListArguments(arguments, 1);\n      var url = util.safeUrl('floating_ips', args.identifier, 'actions');\n\n      return this.client.get.apply(this.client, [url, {}].concat(slice.call(args.params), [200, 'actions', args.callback]));\n    };\n\n    /**\n     * Get the identified action object.\n     *\n     * @param {strint} ip - The IP of the floating ip for which to retrieve the action\n     * @param {number} id - The id of the action to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof FloatingIp\n     */\n    FloatingIp.prototype.getAction = function(ip, id, callback) {\n      var url = util.safeUrl('floating_ips', ip, 'actions', id);\n      return this.client.get(url, {}, 200, 'action', callback);\n    };\n\n    /**\n     * Create an action on the identified floating ip.\n     *\n     * @param {strint} ip - The IP of the floating ip for which to create the action\n     * @param {string|object} parametersOrType - The name of the action to create or an object with key value pairs of parameters.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof FloatingIp\n     */\n    FloatingIp.prototype.action = function(ip, parametersOrType, callback) {\n      var parameters;\n\n      if(typeof parametersOrType === 'string') {\n        parameters = { type: parametersOrType };\n      } else {\n        parameters = parametersOrType;\n      }\n\n      var url = util.safeUrl('floating_ips', ip, 'actions');\n      return this.client.post(url, parameters, 201, 'action', callback);\n    };\n\n    /**\n     * If the identified floating IP is assigned to a Droplet, unassign it.\n     *\n     * @param {strint} ip - The IP of the floating ip for which to create the action\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof FloatingIp\n     */\n    FloatingIp.prototype.unassign = function(ip, callback) {\n      return this.action(ip, 'unassign', callback);\n    };\n\n    /**\n     * Assign the identified floating IP to a Droplet.\n     *\n     * @param {strint} ip - The IP of the floating ip for which to create the action\n     * @param {number|object} parametersOrDropletId - If a number, the identifier of the Droplet. Otherwise, an object with required keys of `droplet_id`. See the {@link https://developers.digitalocean.com/documentation/v2/#assign-a-floating-ip-to-a-droplet|official docs} for valid attributes.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof FloatingIp\n     */\n    FloatingIp.prototype.assign = function(ip, parametersOrDropletId, callback) {\n      var parameters;\n\n      if(typeof parametersOrDropletId !== 'object') {\n        parameters = {\n          droplet_id: parametersOrDropletId\n        };\n      } else {\n        parameters = parametersOrDropletId;\n      }\n      parameters.type = 'assign';\n\n      return this.action(ip, parameters, callback);\n    };\n\n    return FloatingIp;\n  })();\n\n  module.exports = FloatingIp;\n}).call(this);","/home/travis/build/npmtest/node-npmtest-digitalocean/node_modules/digitalocean/lib/digitalocean/image.js":"(function() {\n  var slice = [].slice,\n    util = require('./util');\n\n  /**\n    * Image resource\n    * @class Image\n    */\n  var Image = (function() {\n    function Image(client) {\n      this.client = client;\n    }\n\n    /**\n     * List image objects.\n     *\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Image\n     */\n    Image.prototype.list = function() {\n      var args = util.extractListArguments(arguments, 0);\n      return this.client.get.apply(this.client, ['/images', {}].concat(slice.call(args.params), [200, 'images', args.callback]));\n    };\n\n    /**\n     * Get the identified image object.\n     *\n     * @param {number} id - The id of the image to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Image\n     */\n    Image.prototype.get = function(id, callback) {\n      var url = util.safeUrl('images', id);\n      return this.client.get(url, {}, 200, 'image', callback);\n    };\n\n    /**\n     * Update the identified image object.\n     *\n     * @param {number} id - The id of the image to update\n     * @param {object} attributes - The attributes with which to create the Droplet. See the {@link https://developers.digitalocean.com/documentation/v2/#images|official docs} for valid attributes.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Image\n     */\n    Image.prototype.update = function(id, attributes, callback) {\n      var url = util.safeUrl('images', id);\n      return this.client.put(url, attributes, 200, 'image', callback);\n    };\n\n    /**\n     * Delete the identified image object.\n     *\n     * @param {number} id - The id of the image to delete\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Image\n     */\n    Image.prototype.delete = function(id, callback) {\n      var url = util.safeUrl('images', id);\n      return this.client.delete(url, {}, 204, [], callback);\n    };\n\n    /**\n     * List of action objects.\n     *\n     * @param {number} id - ID of Droplet for which to retrieve actions\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Image\n     */\n    Image.prototype.listActions = function() {\n      var args = util.extractListArguments(arguments, 1);\n      var url = util.safeUrl('images', args.identifier, 'actions');\n\n      return this.client.get.apply(this.client, [url, {}].concat(slice.call(args.params), [200, 'actions', args.callback]));\n    };\n\n    /**\n     * Get the identified action object.\n     *\n     * @param {number} imageId - The id of the image for which to retrieve the action\n     * @param {number} id - The id of the action to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Image\n     */\n    Image.prototype.getAction = function(imageId, id, callback) {\n      var url = util.safeUrl('images', imageId, 'actions', id);\n      return this.client.get(url, {}, 200, 'action', callback);\n    };\n\n    /**\n     * Create an action on the identified image.\n     *\n     * @param {number} imageId - The id of the image for which to create the action\n     * @param {string|object} parametersOrType - The name of the action to create or an object with key value pairs of parameters.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Image\n     */\n    Image.prototype.action = function(imageId, parametersOrType, callback) {\n      var parameters;\n\n      if(typeof parametersOrType === 'string') {\n        parameters = { type: parametersOrType };\n      } else {\n        parameters = parametersOrType;\n      }\n\n      var url = util.safeUrl('images', imageId, 'actions');\n      return this.client.post(url, parameters, 201, 'action', callback);\n    };\n\n    /**\n     * If the image is a backup, wwitch the identified image from a backup to a snapshot.\n     *\n     * @param {number} dropletId - The id of the image for which to create the action\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Image\n     */\n    Image.prototype.convert = function(imageId, callback) {\n      return this.action(imageId, 'convert', callback);\n    };\n\n    /**\n     * Add the image to an additional region.\n     *\n     * @param {number} imageId - The id of the image for which to create the action\n     * @param {string|object} parametersOrRegionSlug - If a string, the identifier of the region. Otherwise, an object with required keys of `region`. See the {@link https://developers.digitalocean.com/documentation/v2/#transfer-an-image|official docs} for valid attributes.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Image\n     */\n    Image.prototype.transfer = function(imageId, parametersOrRegionSlug, callback) {\n      var parameters;\n\n      if(typeof parametersOrRegionSlug !== 'object') {\n        parameters = {\n          region: parametersOrRegionSlug\n        };\n      } else {\n        parameters = parametersOrRegionSlug;\n      }\n      parameters.type = 'transfer';\n\n      return this.action(imageId, parameters, callback);\n    };\n\n    return Image;\n  })();\n\n  module.exports = Image;\n}).call(this);","/home/travis/build/npmtest/node-npmtest-digitalocean/node_modules/digitalocean/lib/digitalocean/region.js":"(function() {\n  var slice = [].slice,\n    util = require('./util');\n\n  /**\n    * Region resource\n    * @class Region\n    */\n  var Region = (function() {\n    function Region(client) {\n      this.client = client;\n    }\n\n    /**\n     * List region objects.\n     *\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof region\n     */\n    Region.prototype.list = function() {\n      var args = util.extractListArguments(arguments, 0);\n      return this.client.get.apply(this.client, ['/regions', {}].concat(slice.call(args.params), [200, 'regions', args.callback]));\n    };\n\n    return Region;\n  })();\n\n  module.exports = Region;\n}).call(this);","/home/travis/build/npmtest/node-npmtest-digitalocean/node_modules/digitalocean/lib/digitalocean/size.js":"(function() {\n  var slice = [].slice,\n    util = require('./util');\n  /**\n    * Size resource\n    * @class Size\n    */\n  var Size = (function() {\n    function Size(client) {\n      this.client = client;\n    }\n\n    /**\n     * List size objects.\n     *\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Size\n     */\n    Size.prototype.list = function() {\n      var args = util.extractListArguments(arguments, 0);\n      return this.client.get.apply(this.client, ['/sizes', {}].concat(slice.call(args.params), [200, 'sizes', args.callback]));\n    };\n\n    return Size;\n  })();\n\n  module.exports = Size;\n}).call(this);","/home/travis/build/npmtest/node-npmtest-digitalocean/node_modules/digitalocean/lib/digitalocean/snapshot.js":"(function() {\n  var slice = [].slice,\n    util = require('./util');\n\n  /**\n    * Snapshot resource\n    * @class Snapshot\n    */\n  var Snapshot = (function() {\n    function Snapshot(client) {\n      this.client = client;\n    }\n\n    /**\n     * List snapshot objects.\n     *\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Snapshot\n     */\n    Snapshot.prototype.list = function() {\n      var args = util.extractListArguments(arguments, 0);\n      return this.client.get.apply(this.client, ['/snapshots', {}].concat(slice.call(args.params), [200, 'snapshots', args.callback]));\n    };\n\n    /**\n     * Get the identified snapshot object.\n     *\n     * @param {string} id - The id of the snapshot to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Snapshot\n     */\n    Snapshot.prototype.get = function(id, callback) {\n      var url = util.safeUrl('snapshots', id);\n      return this.client.get(url, {}, 200, 'snapshot', callback);\n    };\n\n    /**\n     * Delete the identified snapshot object.\n     *\n     * @param {string} id - The id of the snapshot to delete\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Snapshot\n     */\n    Snapshot.prototype.delete = function(id, callback) {\n      var url = util.safeUrl('snapshots', id);\n      return this.client.delete(url, {}, 204, [], callback);\n    };\n\n    return Snapshot;\n  })();\n\n  module.exports = Snapshot;\n}).call(this);","/home/travis/build/npmtest/node-npmtest-digitalocean/node_modules/digitalocean/lib/digitalocean/tag.js":"(function() {\n  var slice = [].slice,\n    util = require('./util');\n\n  /**\n    * Tag resource\n    * @class Tag\n    */\n  var Tag = (function() {\n    function Tag(client) {\n      this.client = client;\n    }\n\n    /**\n     * List tag objects.\n     *\n     * @param {(number|object)} [page or queryObject] - page number to retrieve or key value pairs of query parameters\n     * @param {number} [perPage] - number of result per page to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Tag\n     */\n    Tag.prototype.list = function() {\n      var args = util.extractListArguments(arguments, 0);\n      return this.client.get.apply(this.client, ['/tags', {}].concat(slice.call(args.params), [200, 'tags', args.callback]));\n    };\n\n    /**\n     * Create a tag object.\n     *\n     * @param {object} attributes - The attributes with which to create the tag. See the {@link https://developers.digitalocean.com/documentation/v2/#tags|official docs} for valid attributes.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Tag\n     */\n    Tag.prototype.create = function(attributes, callback) {\n      return this.client.post('/tags', attributes, 201, 'tag', callback);\n    };\n\n    /**\n     * Get the identified tag object.\n     *\n     * @param {string} name - The name of the tag to retrieve\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Tag\n     */\n    Tag.prototype.get = function(name, callback) {\n      var url = util.safeUrl('tags', name);\n      return this.client.get(url, {}, 200, 'tag', callback);\n    };\n\n    /**\n     * Update the identified tag object.\n     *\n     * @param {string} name - The name of the tag to udpate\n     * @param {object} attributes - The attributes with which to update the tag. See the {@link https://developers.digitalocean.com/documentation/v2/#tags|official docs} for valid attributes.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Tag\n     */\n    Tag.prototype.update = function(name, attributes, callback) {\n      var url = util.safeUrl('tags', name);\n      return this.client.put(url, attributes, 200, 'tag', callback);\n    };\n\n    /**\n     * @typedef Resources\n     * @type {object}\n     * @property {string} resource_id - a resource ID.\n     * @property {string} resource_type - a resource type.\n     */\n\n    /**\n     * Associate the identified tag with the identified resources.\n     *\n     * @param {string} name - The name of the tag to udpate\n     * @param {Resources[]} resources - An array of objects each with keys of resource_id and resource_type.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Tag\n     */\n    Tag.prototype.tag = function(name, resources, callback) {\n      var attributes = { \"resources\": resources };\n      var url = util.safeUrl('tags', name, 'resources');\n      return this.client.post(url, attributes, 204, [], callback);\n    };\n\n    /**\n     * Unassociate the identified tag with the identified resources.\n     *\n     * @param {string} name - The name of the tag to udpate\n     * @param {Resources[]} resources - An array of objects each with keys of resource_id and resource_type.\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Tag\n     */\n    Tag.prototype.untag = function(name, resources, callback) {\n      var attributes = { \"resources\": resources };\n      var url = util.safeUrl('tags', name, 'resources');\n      return this.client.delete(url, attributes, 204, [], callback);\n    };\n\n    /**\n     * Delete the identified tag object.\n     *\n     * @param {string} name - The name of the tag to delete\n     * @param {requestCallback} [callback] - callback that handles the response\n     * @memberof Tag\n     */\n    Tag.prototype.delete = function(name, callback) {\n      var url = util.safeUrl('tags', name);\n      return this.client.delete(url, {}, 204, [], callback);\n    };\n\n    return Tag;\n  })();\n\n  module.exports = Tag;\n}).call(this);","/home/travis/build/npmtest/node-npmtest-digitalocean/node_modules/digitalocean/lib/digitalocean/error.js":"(function() {\n  var extend = function(child, parent) {\n      for (var key in parent) {\n        if (hasProp.call(parent, key)) {\n          child[key] = parent[key];\n        }\n      }\n\n      function Constructor() {\n        this.constructor = child;\n      }\n      Constructor.prototype = parent.prototype;\n      child.prototype = new Constructor();\n      child.__super__ = parent.prototype;\n      return child;\n    },\n    hasProp = {}.hasOwnProperty;\n\n  var DigitalOceanError = (function(superClass) {\n    extend(DigitalOceanError, superClass);\n\n    function DigitalOceanError(message, statusCode, headers, body) {\n      this.message = message;\n      this.statusCode = statusCode;\n      this.headers = headers;\n      this.body = body;\n    }\n    return DigitalOceanError;\n  })(Error);\n\n  module.exports = DigitalOceanError;\n}).call(this);"}